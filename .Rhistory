averages = c(averages, average)
}
print(averages)
for (i in emergency_types) {
sum = 0
count = 0
for (j in 1:length(received_times)) {
if (i == all_data[j,28]) {
# Account for times after midnight
if (fulfilled_times[j] >= 1440 & received_times[j] < 1440) {
add_to_sum = (1440 - received_times[j]) + (fulfilled_times[j] - 1440)
}
else if (received_times[j] >= 1440 & fulfilled_times < 1440) {
add_to_sum = (1500 - fulfilled_times[j]) + (received_times[j] - 60)
}
else {
add_to_sum = fulfilled_times[j] - received_times[i]
}
# For finding the average
sum = sum + add_to_sum
count = count + 1
}
}
average = sum / count
print(average)
averages = c(averages, average)
}
for(i in 1:length(temp_times)) {
# Received
time = all_data[i,2]
time2 = as.numeric(unlist(strsplit(time, ":")))
mins = time2[1] * 60 + time2[2] + time2[3] / 60
received_times = c(received_times, mins)
#Fulfilled
time = all_data[i, 20]
time2 = as.numeric(unlist(strsplit(time, ":")))
mins = time2[1] * 60 + time2[2] + time2[3] / 60
fulfilled_times = c(fulfilled_times, mins)
}
print(received_times)
print(fulfilled_times)
print(all_data[,28])
for(i in emergency_types) {
print(emergency_types[i])
}
for(i in emergency_types) {
print(i)
}
for (i in emergency_types) {
sum = 0
count = 0
for (j in 1:length(received_times)) {
if (i == all_data[j,28]) {
# Account for times after midnight
if (fulfilled_times[j] >= 1440 & received_times[j] < 1440) {
add_to_sum = (1440 - received_times[j]) + (fulfilled_times[j] - 1440)
}
else if (received_times[j] >= 1440 & fulfilled_times < 1440) {
add_to_sum = (1500 - fulfilled_times[j]) + (received_times[j] - 60)
}
else {
add_to_sum = fulfilled_times[j] - received_times[i]
}
# For finding the average
sum = sum + add_to_sum
count = count + 1
print(sum)
print(count)
}
}
average = sum / count
print(average)
averages = c(averages, average)
}
print(received_times[1])
print(fulfilled_times[1])
print(all_data[1, 28])
print(emergency_types[1])
if (emergency_types[1] == all_data[1, 28]) {
print("hi")
}
time = all_data[i,2]
time2 = as.numeric(unlist(strsplit(time, ":")))
mins = time2[1] * 60 + time2[2] + time2[3] / 60
received_times = c(received_times, mins)
#Fulfilled
time = all_data[i, 20]
time2 = as.numeric(unlist(strsplit(time, ":")))
mins = time2[1] * 60 + time2[2] + time2[3] / 60
fulfilled_times = c(fulfilled_times, mins)
}
averages = c()
for (i in emergency_types) {
sum = 0
count = 0
for (j in 1:length(received_times)) {
if (i == all_data[j,28]) {
# Account for times after midnight
if (fulfilled_times[j] >= 1440 & received_times[j] < 1440) {
add_to_sum = (1440 - received_times[j]) + (fulfilled_times[j] - 1440)
print(add_to_sum)
}
else if (received_times[j] >= 1440 & fulfilled_times < 1440) {
add_to_sum = (1500 - fulfilled_times[j]) + (received_times[j] - 60)
print(add_to_sum)
}
else {
add_to_sum = fulfilled_times[j] - received_times[i]
print(add_to_sum)
}
# For finding the average
sum = sum + add_to_sum
count = count + 1
}
}
average = sum / count
print(average)
averages = c(averages, average)
}
for (i in emergency_types) {
sum = 0
count = 0
for (j in 1:length(received_times)) {
if (i == all_data[j,28]) {
# Account for times after midnight
if (fulfilled_times[j] >= 1440 & received_times[j] < 1440) {
add_to_sum = (1440 - received_times[j]) + (fulfilled_times[j] - 1440)
}
else if (received_times[j] >= 1440 & fulfilled_times < 1440) {
add_to_sum = (1500 - fulfilled_times[j]) + (received_times[j] - 60)
}
else {
print(fulfilled_times[j])
print(received_times[j])
add_to_sum = fulfilled_times[j] - received_times[j]
}
# For finding the average
sum = sum + add_to_sum
count = count + 1
}
}
average = sum / count
print(average)
averages = c(averages, average)
}
for (i in emergency_types) {
sum = 0
count = 0
for (j in 1:length(received_times)) {
if (i == all_data[j,28]) {
# Account for times after midnight
if (fulfilled_times[j] >= 1440 & received_times[j] < 1440) {
add_to_sum = (1440 - received_times[j]) + (fulfilled_times[j] - 1440)
}
else if (received_times[j] >= 1440 & fulfilled_times < 1440) {
add_to_sum = (1500 - fulfilled_times[j]) + (received_times[j] - 60)
}
else {
print(fulfilled_times[j])
print(received_times[j])
add_to_sum = fulfilled_times[j] - received_times[j]
print(add_to_sum)
}
# For finding the average
sum = sum + add_to_sum
count = count + 1
}
}
average = sum / count
print(average)
averages = c(averages, average)
}
for (i in emergency_types) {
sum = 0
count = 0
for (j in 1:length(received_times)) {
if (i == all_data[j,28]) {
# Account for times after midnight
if (fulfilled_times[j] >= 1440 & received_times[j] < 1440) {
add_to_sum = (1440 - received_times[j]) + (fulfilled_times[j] - 1440)
}
else if (received_times[j] >= 1440 & fulfilled_times < 1440) {
add_to_sum = (1500 - fulfilled_times[j]) + (received_times[j] - 60)
}
else {
add_to_sum = fulfilled_times[j] - received_times[j]
print(add_to_sum)
}
# For finding the average
sum = sum + add_to_sum
count = count + 1
}
}
average = sum / count
print(average)
averages = c(averages, average)
}
for (i in emergency_types) {
sum = 0
count = 0
for (j in 1:length(received_times)) {
if (i == all_data[j,28]) {
# Account for times after midnight
if (fulfilled_times[j] >= 1440 & received_times[j] < 1440) {
add_to_sum = (1440 - received_times[j]) + (fulfilled_times[j] - 1440)
if (j == 1) {
print("wrong")
}
}
else if (received_times[j] >= 1440 & fulfilled_times < 1440) {
add_to_sum = (1500 - fulfilled_times[j]) + (received_times[j] - 60)
if (j == 1) {
print("wrong")
}
}
else {
add_to_sum = fulfilled_times[j] - received_times[j]
print(add_to_sum)
if (j == 1) {
print("correct")
}
}
# For finding the average
sum = sum + add_to_sum
count = count + 1
}
}
average = sum / count
print(average)
averages = c(averages, average)
}
for (i in emergency_types) {
sum = 0
count = 0
for (j in 1:length(received_times)) {
if (i == all_data[j,28]) {
# Account for times after midnight
if (fulfilled_times[j] >= 1440 & received_times[j] < 1440) {
add_to_sum = (1440 - received_times[j]) + (fulfilled_times[j] - 1440)
if (j == 1) {
print("wrong")
}
}
else if (received_times[j] >= 1440 & fulfilled_times < 1440) {
add_to_sum = (1500 - fulfilled_times[j]) + (received_times[j] - 60)
if (j == 1) {
print("wrong")
}
}
else {
add_to_sum = fulfilled_times[j] - received_times[j]
if (j == 1) {
print("correct")
}
}
# For finding the average
sum = sum + add_to_sum
count = count + 1
}
}
average = sum / count
averages = c(averages, average)
}
for (i in emergency_types) {
sum = 0
count = 0
for (j in 1:length(received_times)) {
if (i == all_data[j,28]) {
# Account for times after midnight
if (fulfilled_times[j] >= 1440 & received_times[j] < 1440) {
add_to_sum = (1440 - received_times[j]) + (fulfilled_times[j] - 1440)
if (j == 1) {
print("wrong")
}
}
else if (received_times[j] >= 1440 & fulfilled_times < 1440) {
add_to_sum = (1500 - fulfilled_times[j]) + (received_times[j] - 60)
if (j == 1) {
print("wrong")
}
}
else {
add_to_sum = fulfilled_times[j] - received_times[j]
if (j == 1) {
print(fulfilled_times[1])
print(received_times[1])
}
}
# For finding the average
sum = sum + add_to_sum
count = count + 1
}
}
average = sum / count
averages = c(averages, average)
}
for (i in emergency_types) {
sum = 0
count = 0
for (j in 1:length(received_times)) {
if (i == all_data[j,28]) {
# Account for times after midnight
if (fulfilled_times[j] >= 1440 & received_times[j] < 1440) {
add_to_sum = (1440 - received_times[j]) + (fulfilled_times[j] - 1440)
if (j == 1) {
print("wrong")
}
}
else if (received_times[j] >= 1440 & fulfilled_times < 1440) {
add_to_sum = (1500 - fulfilled_times[j]) + (received_times[j] - 60)
if (j == 1) {
print("wrong")
}
}
else {
add_to_sum = fulfilled_times[j] - received_times[j]
if (j == 1) {
print(fulfilled_times[1])
print(received_times[1])
}
}
# For finding the average
sum = sum + add_to_sum
count = count + 1
}
}
average = sum / count
averages = c(averages, average)
}
for(i in 1:length(temp_times)) {
# Received
time = all_data[i,2]
time2 = as.numeric(unlist(strsplit(time, ":")))
mins = time2[1] * 60 + time2[2] + time2[3] / 60
received_times = c(received_times, mins)
#Fulfilled
time = all_data[i, 3]
time2 = as.numeric(unlist(strsplit(time, ":")))
mins = time2[1] * 60 + time2[2] + time2[3] / 60
fulfilled_times = c(fulfilled_times, mins)
}
averages = c()
for (i in emergency_types) {
sum = 0
count = 0
for (j in 1:length(received_times)) {
if (i == all_data[j,28]) {
# Account for times after midnight
if (fulfilled_times[j] >= 1440 & received_times[j] < 1440) {
add_to_sum = (1440 - received_times[j]) + (fulfilled_times[j] - 1440)
if (j == 1) {
print("wrong")
}
}
else if (received_times[j] >= 1440 & fulfilled_times < 1440) {
add_to_sum = (1500 - fulfilled_times[j]) + (received_times[j] - 60)
if (j == 1) {
print("wrong")
}
}
else {
add_to_sum = fulfilled_times[j] - received_times[j]
if (j == 1) {
print(fulfilled_times[1])
print(received_times[1])
}
}
# For finding the average
sum = sum + add_to_sum
count = count + 1
}
}
average = sum / count
averages = c(averages, average)
}
print(fulfilled_times)
print(fulfilled_times)
library(tidyr)
library(plyr)
# Read data into two data frames, separating time data
data = read.csv(file="C:/Users/rache/Desktop/Capital\ One/sfpd_dispatch_data_subset.csv", header=FALSE, sep=",",
colClasses=c(rep("NULL", 6), rep("character", 7), "NULL", "character", rep("NULL", 21)))
all_data = read.csv(file="C:/Users/rache/Desktop/Capital\ One/sfpd_dispatch_data_subset.csv", header=FALSE, sep=",",
colClasses=c(rep("character", 6), rep("NULL", 7), "character", "NULL", rep("character", 21)))
# Name columns
names = c("received_timestamp", "entry_timestamp", "dispatch_timestamp", "response_timestamp", "on_scence_timestamp",
"transport_timestamp", "hospital_timestamp", "available_timestamp")
colnames(data) = names
other_names = c("call_number", "unit_id", "incident_number", "call_type", "call_date", "watch_date", "call_final_disposition",
"address", "city", "zipcode_of_incident", "battalion", "station_area", "box", "original_priority", "priority",
"priority", "als_unit", "call_type_group", "number of alarms", "unit_type", "unit_sequence_in_call_dispatch",
"fire_prevention_district", "supervisor_district", "neighborhood_district", "location", "row_id", "latitude",
"logitude")
colnames(all_data) = other_names
# Remove the row with titles of columns
data = data[-1,]
all_data = all_data[-1,]
# Split time cells to separate the time from date and time zone
for(i in 1:length(names)) {
temp_data = separate(data, col = names[i], into=c("Date", "Time", "Time Zone"), sep=" ")
temp_vec = temp_data[i]
all_data = cbind(temp_vec, all_data)
all_data = cbind(temp_data[i + 1], all_data)
all_data = cbind(temp_data[i + 2], all_data)
}
# Create graph showing frequency of emergencies by zipcode and save to png file
vector = unlist(as.numeric(all_data$zipcode_of_incident), use.names = FALSE)
counts = table(vector)
setwd("C:/Users/rache/Desktop/Capital\ One")
png("freq_of_zipcodes.png")
barplot(counts, xlab = "Zipcodes", ylab = "Frequency", las = 2, cex.names = 0.8, cex.axis = 0.8, col =  "firebrick",
main = "Frequency of Emergencies by Zipcode")
dev.off()
# Make vector of all the different emergency types
temp_vector = unlist(all_data$call_type, use.names = FALSE)
emergency_types = unique(temp_vector)
# Make vectors of all the call received and fulfilled times
temp_times = unlist(all_data[,2], use.names = FALSE)
received_times = c()
fulfilled_times = c()
# Store received times and fulfilled times into vectors
for(i in 1:length(temp_times)) {
# Received
time = all_data[i,23]
time2 = as.numeric(unlist(strsplit(time, ":")))
mins = time2[1] * 60 + time2[2] + time2[3] / 60
received_times = c(received_times, mins)
#Fulfilled
time = all_data[i, 11]
time2 = as.numeric(unlist(strsplit(time, ":")))
mins = time2[1] * 60 + time2[2] + time2[3] / 60
fulfilled_times = c(fulfilled_times, mins)
}
# Find the average response time for each emergency type
averages = c()
for(i in emergency_types) {
sum = 0
count = 0
for (j in 1:length(received_times)) {
if (i == all_data[j, 28]) {
# Account for times after midnight
if (!is.na(fulfilled_times[j]) & fulfilled_times[j] < received_times[j]) {
add_to_sum = (1440 - received_times[j]) + fulfilled_times[j]
}
else if (!is.na(fulfilled_times[j])) {
add_to_sum = fulfilled_times[j] - received_times[j]
}
# Blank fulfilled times
else {
add_to_sum = 0
count = count - 1
}
# For finding the average
sum = sum + add_to_sum
count = count + 1
}
}
average = sum / count
averages = c(averages, average)
}
# Create data frame of emergency types and their averages
graph_data = data.frame(emergency_types, averages)
# Graph and save average response times
setwd("C:/Users/rache/Desktop/Capital\ One")
png("response_by_type.png")
mar.default <- c(5,4,4,2) + 0.1
par(mar = mar.default + c(7, 0, 0, 0))
barplot(graph_data[,2], xlab="", ylab="Average Respnse Time",
main="Average Response Time by Emergency Type", las = 2, cex.names = 0.8,
cex.axis = 0.8, names.arg = graph_data[,1], col = "firebrick")
mtext("Emergency Type", side=1, line=10, cex.lab = 0.8)
dev.off()
# Make vector of all the different zipcodes
temp_vector = unlist(all_data$zipcode_of_incident, use.names = FALSE)
zipcodes = unique(temp_vector)
print(zipcodes)
# Find the average response time for each emergency type
averages = c()
for(i in zipcodes) {
sum = 0
count = 0
for (j in 1:length(received_times)) {
if (i == all_data[j, 34]) {
# Account for times after midnight
if (!is.na(fulfilled_times[j]) & fulfilled_times[j] < received_times[j]) {
add_to_sum = (1440 - received_times[j]) + fulfilled_times[j]
}
else if (!is.na(fulfilled_times[j])) {
add_to_sum = fulfilled_times[j] - received_times[j]
}
# Blank fulfilled times
else {
add_to_sum = 0
count = count - 1
}
# For finding the average
sum = sum + add_to_sum
count = count + 1
}
}
average = sum / count
averages = c(averages, average)
}
# Create data frame of zipcodes and their averages
graph_data = data.frame(zipcodes, averages)
# Graph and save average response times
setwd("C:/Users/rache/Desktop/Capital\ One")
png("response_by_zipcode.png")
barplot(graph_data[,2], xlab="Zipcode", ylab="Average Respnse Time",
main="Average Response Time by Zipcode", las = 2, cex.names = 0.8,
cex.axis = 0.8, names.arg = graph_data[,1], col = "firebrick")
dev.off()
